package com.mediscreen.historymicroservice.unitaryTest;


import com.mediscreen.historymicroservice.dto.PatientHistoryDTO;
import com.mediscreen.historymicroservice.model.PatientHistory;
import com.mediscreen.historymicroservice.tool.ModelBuilder;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;

import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
public class ModelBuilderTest {

    @InjectMocks
    ModelBuilder modelBuilder;

    //-----------------PatientHistory---------------------------------------------------------------------------
    @Test
    @DisplayName("PatientHistory builder Test")
    public void builderPatientHistoryTest(){
        LocalDate date = LocalDate.now();
        PatientHistoryDTO phDTO = new PatientHistoryDTO( "id generated by mongoDB", 1, date,
                "a note from a doctor on a patient");
        PatientHistory ph = modelBuilder.buildPatientHistory(phDTO);

        assertThat(ph.getId()).isEqualTo(phDTO.getId());
        assertThat(ph.getPatientId()).isEqualTo(phDTO.getPatientId());
        assertThat(ph.getDate()).isEqualTo(phDTO.getDate());
        assertThat(ph.getNotes()).isEqualTo(phDTO.getNotes());
    }

    @Test
    @DisplayName("PatientHistory builder WithOut ID Test")
    public void builderPatientHistoryWithOutIDTest(){
        LocalDate date = LocalDate.now();
        PatientHistoryDTO phDTO = new PatientHistoryDTO(  1, date,
                "a note from a doctor on a patient");
        PatientHistory ph = modelBuilder.buildPatientHistory(phDTO);

        assertThat(ph.getId()).isEqualTo(phDTO.getId());
        assertThat(ph.getPatientId()).isEqualTo(phDTO.getPatientId());
        assertThat(ph.getDate()).isEqualTo(phDTO.getDate());
        assertThat(ph.getNotes()).isEqualTo(phDTO.getNotes());
    }


}
